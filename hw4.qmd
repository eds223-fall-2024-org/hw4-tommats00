---
title: "Homework 4"
author: "Tom Gibbens-Matsuyama"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

### Load libraries

```{r}
library(tidyverse)
library(tmap)
library(terra)
library(here)
library(sf)
library(paletteer)
```

### Load data

```{r}
# Shapefile for the West Coast EEZ
eez <- read_sf(here("data", "wc_regions_clean.shp"))

# Depth raster
depth <- rast(here("data", "depth.tif"))

# SST rasters
sst_2008 <- rast(here("data", "average_annual_sst_2008.tif"))
sst_2009 <- rast(here("data", "average_annual_sst_2009.tif"))
sst_2010 <- rast(here("data", "average_annual_sst_2010.tif"))
sst_2011 <- rast(here("data", "average_annual_sst_2011.tif"))
sst_2012 <- rast(here("data", "average_annual_sst_2012.tif"))

# Combine 5 layers into one raster
sst <- c(sst_2008, sst_2009, sst_2010, sst_2011, sst_2012)
```

### Compare CRS

```{r}
eez <- st_transform(eez, crs("EPSG:4326"))
depth <- project(depth, crs("EPSG:4326"))
sst <- project(sst, crs("EPSG:4326"))

st_crs(eez) == st_crs(depth)

st_crs(eez) == st_crs(sst)

st_crs(sst) == st_crs(depth)
```


### Process SST and depth data so they can be combined

```{r}
# Find mean SST from 2008-2012
# Taking the mean of the 5 SST layers and turning it into one layer
mean_sst <- app(sst, fun = mean, na.rm = TRUE)

# Convert average SST from Kelvin to Celsius
sst_c <- mean_sst - 273.15

# Crop depth raster to match extent of SST raster
depth_crop <- crop(depth, sst_c)

# Resample the depth data to match the resolution of the SST data using the nearest neighbor approach
depth_resample <- resample(depth_crop, sst_c, method = "near")

# Check that depth and SST match in resolution, extent and CRS
sst_depth <- c(sst_c, depth_resample)
```

### Find suitable locations

```{r}
# Create reclassification matrix for SST
sst_rcl <- matrix(c(-Inf, 11, 0,
                    11, 30, 1,
                    30, Inf, 0),
                  ncol = 3, byrow = TRUE)

# Use reclassification matrix to reclassify sst raster
sst_reclassify <- classify(sst_c, rcl = sst_rcl)


# Create classification matrix for Depth
depth_rcl <- matrix(c(-Inf, -70, 0,
                      -70, 0, 1,
                      0, Inf, 0),
                    ncol = 3, byrow = TRUE)

# Reclassify Depth raster
depth_reclassify <- classify(depth_resample, rcl = depth_rcl)

# Find areas that satistfy both SST and Depth
# Use lapp() to multiple values of rasters together
sst_depth_condition <- lapp(c(sst_reclassify, depth_reclassify), fun = "*")

# Plot both variables together to find suitable areas
plot(sst_depth_condition)
```

### Determine the most suitable EEZ

```{r}
# Assign raster values of 0 to NA for cellSize calculation
sst_depth_NA <- sst_depth_condition
sst_depth_NA[sst_depth_NA == 0] <- NA

# Find suitable area
suitable_area <- cellSize(sst_depth_NA,
         mask = TRUE,
         unit = "km")

# Rasterize the eez data
eez_raster <- rasterize(eez, suitable_area, "rgn")

# Sum suitable areas for each eez 
eez_suitable <- zonal(x = suitable_area, 
                      z = eez_raster, 
                      fun = "sum", 
                      na.rm = TRUE)



print(paste("Suitable area for Oysters in", eez_suitable$rgn[1], "is", round(eez_suitable$area[1]), "km^2"))
print(paste("Suitable area for Oysters in", eez_suitable$rgn[2], "is", round(eez_suitable$area[2]), "km^2"))
print(paste("Suitable area for Oysters in", eez_suitable$rgn[3], "is", round(eez_suitable$area[3]), "km^2"))
print(paste("Suitable area for Oysters in", eez_suitable$rgn[4], "is", round(eez_suitable$area[4]), "km^2"))
print(paste("Suitable area for Oysters in", eez_suitable$rgn[5], "is", round(eez_suitable$area[5]), "km^2"))

# sst_depth_cond_vec <- as.polygons(sst_depth_condition) %>% 
#   st_as_sf()

my_palette <- c(RColorBrewer::brewer.pal(9, "Greens")[1:5], RColorBrewer::brewer.pal(9, "Blues")[1:5])
# Map of the suitable areas 

tm_shape(depth_crop) +
  tm_raster(legend.show = FALSE) +
  tm_shape(sst_depth_condition) +
  tm_raster(legend.show = FALSE) +
tm_shape(eez_raster) +
  tm_raster(palette = c("red", "green", "blue"),
            title = "Region") + 
  tm_shape(sst_depth_condition) +
  tm_raster(alpha = 0.8,
            legend.show = FALSE) +
  tm_layout(frame = FALSE,
            legend.position = c(0.05,0.05),
            legend.text.size = 0.5) +
  tm_compass(position = c(0, 0.85)) +
  tm_scale_bar(position = c(0.615, 0.90)) 



tm_shape(depth_crop) +
  tm_raster(legend.show = FALSE) +
tm_shape(eez_raster) +
  tm_raster(palette = "viridis",
            title = "Region") + 
  tm_shape(sst_depth_condition) +
  tm_raster(legend.show = FALSE,
            alpha = 0.5) + 
  tm_layout(frame = FALSE,
            legend.position = c(0.05,0.05),
            legend.text.size = 0.5) +
  tm_compass(position = c(0, 0.85)) +
  tm_scale_bar(position = c(0.615, 0.90)) 
  
  
  

  tm_shape(sst_depth_condition) +
  tm_raster(legend.show = FALSE,
            palette = my_palette)
  
  tm_shape(eez_raster) +
  tm_raster(palette = "viridis",
            title = "Region")
  
  tm_shape(depth_crop) +
  tm_raster(legend.show = FALSE,
            palette = my_palette)
```



